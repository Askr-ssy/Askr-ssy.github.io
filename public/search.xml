<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/22/hello-world/"/>
      <url>/2019/12/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>$$sqrt(10)$$</p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>copy_and_deepcopy</title>
      <link href="/2018/12/22/copy-and-deepcopy/"/>
      <url>/2018/12/22/copy-and-deepcopy/</url>
      
        <content type="html"><![CDATA[<h2 id="copy-and-deepcopy"><a href="#copy-and-deepcopy" class="headerlink" title="copy and deepcopy"></a>copy and deepcopy</h2><p>在python3 中 复制分为三种,即 “赋值” “浅拷贝” “深拷贝”.</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>赋值即利用 “=” 号运算符进行赋值, 但是这种赋值其本质是 “引用”, 即 重新创建一个变量名,然后绑定到 “=” 号右值的地址,这种情况下,<strong>任何对新创建的变量进行的修改都会同步到旧的变量上!</strong></p><p>案例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; old &#x3D; 2</span><br><span class="line">&gt;&gt;&gt; new &#x3D; old</span><br><span class="line">&gt;&gt;&gt; id(old)</span><br><span class="line">140721449431328</span><br><span class="line">&gt;&gt;&gt; id(new)</span><br><span class="line">140721449431328</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; old &#x3D; [1,2,3]</span><br><span class="line">&gt;&gt;&gt; new &#x3D; old</span><br><span class="line">&gt;&gt;&gt; old[0]&#x3D;&quot;1&quot;</span><br><span class="line">&gt;&gt;&gt; new</span><br><span class="line">[&#39;1&#39;, 2, 3]</span><br><span class="line">&gt;&gt;&gt; old is new</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; id(old)&#x3D;&#x3D;id(new)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>PS:总结来说,则是<strong>创建了一个新的变量名.然后指向旧变量的地址</strong></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>第二种即是我们常说的 <strong>浅拷贝</strong> 这种拷贝是在于自定义的数据类型 被 “=” 运算符使用时所发生的.这种情况下 任何简易的修改(指 第一层引用的修改) 并不会改动另一个变量,但是在修改深处的值时,则依旧会影响到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; old &#x3D; [1,2,[3,4]]</span><br><span class="line">&gt;&gt;&gt; new &#x3D; copy.copy(old)</span><br><span class="line">&gt;&gt;&gt; old[0]&#x3D;&quot;1&quot;</span><br><span class="line">&gt;&gt;&gt; old</span><br><span class="line">[&#39;1&#39;, 2, [3, 4]]</span><br><span class="line">&gt;&gt;&gt; new</span><br><span class="line">[1, 2, [3, 4]]</span><br><span class="line">&gt;&gt;&gt; old[2][0] &#x3D; &quot;3&quot;</span><br><span class="line">&gt;&gt;&gt; old</span><br><span class="line">[&#39;1&#39;, 2, [&#39;3&#39;, 4]]</span><br><span class="line">&gt;&gt;&gt; new</span><br><span class="line">[1, 2, [&#39;3&#39;, 4]]</span><br></pre></td></tr></table></figure><p>PS:总结来说,<strong>浅拷贝在复制的时候,对于变量的第一层地址.创建了新的空间.但是对于第二层以下的地址.则是直接偷懒.把地址复制了赋予左边,并没有开创同等的空间</strong></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>第三种 深拷贝 才是真正意义上的完全拷贝.即重新创建与右值同样大小的空间.然后循环复制.这种情况下.新创建的变量无论如何修改都不会影响到旧的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import copy</span><br><span class="line">&gt;&gt;&gt; old &#x3D; [1,2,[3,4]]</span><br><span class="line">&gt;&gt;&gt; new &#x3D; copy.deepcopy(old)</span><br><span class="line">&gt;&gt;&gt; new</span><br><span class="line">[1, 2, [3, 4]]</span><br><span class="line">&gt;&gt;&gt; new[0]&#x3D;&quot;1&quot;</span><br><span class="line">&gt;&gt;&gt; new[2][0]&#x3D;&quot;3&quot;</span><br><span class="line">&gt;&gt;&gt; new</span><br><span class="line">[&#39;1&#39;, 2, [&#39;3&#39;, 4]]</span><br><span class="line">&gt;&gt;&gt; old</span><br><span class="line">[1, 2, [3, 4]]</span><br></pre></td></tr></table></figure><h5 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h5><pre><code>[ ] 加上图片</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python3 </tag>
            
            <tag> copy </tag>
            
            <tag> deepcopy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
