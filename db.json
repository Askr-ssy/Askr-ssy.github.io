{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1581786176720},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1581786176720},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1581786176720},{"_id":"themes/maupassant/README.md","hash":"4e402501b89720f18ffbfce4203663c79b3c0a7f","modified":1581786176720},{"_id":"themes/maupassant/_config.yml","hash":"74d007f40d13c77b2e202935a589d63bda0dcea5","modified":1581786176720},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1581786176720},{"_id":"source/_posts/copy-and-deepcopy.md","hash":"883e208dada335865853327d46bca62cebceae0c","modified":1581786176708},{"_id":"source/_posts/lvalur-and-rvalue.md","hash":"e47b5c239b9b4fbebe8a6f604dead8f4324ba5eb","modified":1581786176708},{"_id":"source/_posts/secure-shell-1.md","hash":"7e6d56695435545d72dd14a2bcdb1d5f7ae3e38e","modified":1581786213248},{"_id":"source/about/index.md","hash":"b304b89d1890c6f5d60870cbd1e0871f454dc920","modified":1581786176708},{"_id":"themes/maupassant/layout/archive.pug","hash":"05f751cb766616ff96ff22ad0790d9cd28777270","modified":1581786176720},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1581786176720},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1581786176720},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1581786176720},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1581786176720},{"_id":"themes/maupassant/layout/post.pug","hash":"b112011fbb6a32b33e341be7edf043bc4ad5f97e","modified":1581786176720},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1581786176720},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"4c8923bd7fe2a6d413cde7945ac3c34eeef9942b","modified":1581786176720},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1581786176720},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1581786176720},{"_id":"themes/maupassant/languages/en.yml","hash":"518beaa8538a772ca697122264d667059797e458","modified":1581786176720},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1581786176720},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1581786176720},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1581786176720},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1581786176720},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a1a9888b6cd0fd3dc45ffed3490f4ca8ce1abfd7","modified":1581786176720},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"d2ffd7c34c743ec3c01dc1a1ddb8913ffd025f2a","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"78c9a74bc379feca35342e4753a4cc6330a0fe94","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"235660024477ba0f68dacbbde12492280f82242a","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1581786176720},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1581786176720},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1581786176720},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1581786176720},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1581786176720},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1581786176720},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1581786176720},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1581786176720},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1581786176720},{"_id":"themes/maupassant/source/css/donate.css","hash":"ca39d14a598e1de5c51db4170ceb399c6a7131fe","modified":1581786176720},{"_id":"themes/maupassant/source/css/style.scss","hash":"efc7c77064e34c12830763d316bc037fe9315202","modified":1581786176720},{"_id":"themes/maupassant/source/donate/index.html","hash":"72e48cbc939df9e4f963ebf570e0181e129a51c5","modified":1581786176720},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1581786176720},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1581786176720},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1581786176720},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1581786176720},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1581786176720},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1581786176720},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1581786176720},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1581786176720},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1581786176720},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1581786176720},{"_id":"themes/maupassant/source/js/donate.js","hash":"a9ff8d20f00ba6c216e6a55865c0b47ce6b28f2c","modified":1581786176720},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1581786176720},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1581786176724},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1581786176724},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1581786176724},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1581786176724},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1581786176724},{"_id":"public/search.xml","hash":"1884fb42dd495fd1639689125fe16160ca6a31a2","modified":1581786992642},{"_id":"public/about/index.html","hash":"91c3ff83e51dbb79257f7047898306332c190f66","modified":1581786992642},{"_id":"public/2019/02/15/secure-shell-1/index.html","hash":"b4dd7537c12432babe16ceca110b534290b9e28f","modified":1581786992642},{"_id":"public/2019/01/22/lvalur-and-rvalue/index.html","hash":"6ca5f26742734f5e8700e4ede3ce8db07ac9b5eb","modified":1581786992642},{"_id":"public/2018/12/22/copy-and-deepcopy/index.html","hash":"94095ee8b184cc6ebfb593f5dca2f7e17f018463","modified":1581786992642},{"_id":"public/index.html","hash":"0e5d684942d911f88b1ee14f1271676ec94f791c","modified":1581786992642},{"_id":"public/archives/index.html","hash":"fbed28163b1cc375a4da4885d89f89cafb358978","modified":1581786992642},{"_id":"public/archives/2018/index.html","hash":"5634ba2d9d1b8751cd8fd843fc1cd8e07de8d638","modified":1581786992642},{"_id":"public/archives/2018/12/index.html","hash":"5634ba2d9d1b8751cd8fd843fc1cd8e07de8d638","modified":1581786992642},{"_id":"public/archives/2019/index.html","hash":"f65a5e269504cf0c29d63e452c2ca7c976f1762e","modified":1581786992642},{"_id":"public/archives/2019/01/index.html","hash":"e511c47289d19328dd985e64f71b9d4dafcf68aa","modified":1581786992642},{"_id":"public/archives/2019/02/index.html","hash":"23e872f52272b17de394fb148565f1d5189dfd28","modified":1581786992642},{"_id":"public/tags/python/index.html","hash":"04625659e9659783ace057b4aa6d408765c44dde","modified":1581786992642},{"_id":"public/tags/python3/index.html","hash":"8ba9739d057023b74625d9362ef0ebd44b66aecf","modified":1581786992642},{"_id":"public/tags/copy/index.html","hash":"4cb422e1c3716ffe8f949cdb97053c0d121535a5","modified":1581786992642},{"_id":"public/tags/deepcopy/index.html","hash":"5c3baf289aa83b0acd95f8dff4741857f9b3ea81","modified":1581786992642},{"_id":"public/tags/cpp/index.html","hash":"11d853e503f2729b3334cc32e434a817f0029c82","modified":1581786992642},{"_id":"public/tags/lvalue/index.html","hash":"f9030f9eaad168098f1cdefa49b9c8ff607afe95","modified":1581786992642},{"_id":"public/tags/rvalue/index.html","hash":"9a7871fefc2cc709e3ce83a485c48e2787418db1","modified":1581786992642},{"_id":"public/tags/ssh/index.html","hash":"64472132267327a542fb973ca4e35d2ca32179b1","modified":1581786992642},{"_id":"public/tags/rsa/index.html","hash":"e351f23fe3322c14d3cebccaf391290fa66a1fae","modified":1581786992642},{"_id":"public/tags/非对称加密/index.html","hash":"09e94f317eb547f682372730bcb13425955903ed","modified":1581786992642},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1581786992642},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1581786992642},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1581786992642},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1581786992642},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1581786992642},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1581786992642},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1581786992642},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1581786992642},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1581786992642},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1581786992642},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1581786992642},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1581786992642},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1581786992642},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1581786992642},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1581786992642},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1581786992642},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1581786992642},{"_id":"public/donate/index.html","hash":"b5d21ea28ac812cc395671bba53e2e6314146057","modified":1581786992642},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1581786992642},{"_id":"public/css/style.css","hash":"52441e0bf7363399a4c13cffc84de875028b1b54","modified":1581786992642},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1581786992642}],"Category":[],"Data":[],"Page":[{"layout":"page","_content":"\n## about me\n\n```python3\nimport time\n\n```","source":"about/index.md","raw":"---\nlayout: page\n---\n\n## about me\n\n```python3\nimport time\n\n```","date":"2020-02-15T17:02:56.708Z","updated":"2020-02-15T17:02:56.708Z","path":"about/index.html","title":"","comments":1,"_id":"ck6nv4vta0001e5n392j23p8b","content":"<h2 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me\"></a>about me</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me\"></a>about me</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br></pre></td></tr></table></figure>"}],"Post":[{"title":"copy_and_deepcopy","date":"2018-12-22T05:43:36.000Z","description":"python3 三种复制的区别","_content":"## copy and deepcopy\n在python3 中 复制分为三种,即 \"赋值\" \"浅拷贝\" \"深拷贝\".python 官方文档解释如下\n```text\nAssignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).\n```\n\n### 赋值\n赋值即利用 \"=\" 号运算符进行赋值, 但是这种赋值其本质是 “引用”, 即 重新创建一个变量名,然后绑定到 \"=\" 号右值的地址,这种情况下,**任何对新创建的变量进行的修改都会同步到旧的变量上!**\n\n案例如下:\n```python3\n>>> old = 2\n>>> new = old\n>>> id(old)\n140721449431328\n>>> id(new)\n140721449431328\n\n>>> old = [1,2,3]\n>>> new = old\n>>> old[0]=\"1\"\n>>> new\n['1', 2, 3]\n>>> old is new\nTrue\n>>> id(old)==id(new)\nTrue\n```\nPS:总结来说,则是**创建了一个新的变量名.然后指向旧变量的地址**\n\n### 浅拷贝\n第二种即是我们常说的 **浅拷贝** 这种拷贝是在于自定义的数据类型 被 \"=\" 运算符使用时所发生的.这种情况下 任何简易的修改(指 第一层引用的修改) 并不会改动另一个变量,但是在修改深处的值时,则依旧会影响到\n```python3\n>>> import copy\n>>> old = [1,2,[3,4]]\n>>> new = copy.copy(old)\n>>> old[0]=\"1\"\n>>> old\n['1', 2, [3, 4]]\n>>> new\n[1, 2, [3, 4]]\n>>> old[2][0] = \"3\"\n>>> old\n['1', 2, ['3', 4]]\n>>> new\n[1, 2, ['3', 4]]\n```\nPS:总结来说,**浅拷贝在复制的时候,对于变量的第一层地址.创建了新的空间.但是对于第二层以下的地址.则是直接偷懒.把地址复制了赋予左边,并没有开创同等的空间**\n\n### 深拷贝\n第三种 深拷贝 才是真正意义上的完全拷贝.即重新创建与右值同样大小的空间.然后循环复制.这种情况下.新创建的变量无论如何修改都不会影响到旧的变量\n\n```python3\n>>> import copy\n>>> old = [1,2,[3,4]]\n>>> new = copy.deepcopy(old)\n>>> new\n[1, 2, [3, 4]]\n>>> new[0]=\"1\"\n>>> new[2][0]=\"3\"\n>>> new\n['1', 2, ['3', 4]]\n>>> old\n[1, 2, [3, 4]]\n```\n\n#### 引用\nhttps://docs.python.org/3/library/copy.html\n##### TODO\n    [ ] 加上图片","source":"_posts/copy-and-deepcopy.md","raw":"---\ntitle: copy_and_deepcopy\ndate: 2018-12-22 13:43:36\ntags:\n- python\n- python3\n- copy\n- deepcopy\ndescription: python3 三种复制的区别\n---\n## copy and deepcopy\n在python3 中 复制分为三种,即 \"赋值\" \"浅拷贝\" \"深拷贝\".python 官方文档解释如下\n```text\nAssignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).\n```\n\n### 赋值\n赋值即利用 \"=\" 号运算符进行赋值, 但是这种赋值其本质是 “引用”, 即 重新创建一个变量名,然后绑定到 \"=\" 号右值的地址,这种情况下,**任何对新创建的变量进行的修改都会同步到旧的变量上!**\n\n案例如下:\n```python3\n>>> old = 2\n>>> new = old\n>>> id(old)\n140721449431328\n>>> id(new)\n140721449431328\n\n>>> old = [1,2,3]\n>>> new = old\n>>> old[0]=\"1\"\n>>> new\n['1', 2, 3]\n>>> old is new\nTrue\n>>> id(old)==id(new)\nTrue\n```\nPS:总结来说,则是**创建了一个新的变量名.然后指向旧变量的地址**\n\n### 浅拷贝\n第二种即是我们常说的 **浅拷贝** 这种拷贝是在于自定义的数据类型 被 \"=\" 运算符使用时所发生的.这种情况下 任何简易的修改(指 第一层引用的修改) 并不会改动另一个变量,但是在修改深处的值时,则依旧会影响到\n```python3\n>>> import copy\n>>> old = [1,2,[3,4]]\n>>> new = copy.copy(old)\n>>> old[0]=\"1\"\n>>> old\n['1', 2, [3, 4]]\n>>> new\n[1, 2, [3, 4]]\n>>> old[2][0] = \"3\"\n>>> old\n['1', 2, ['3', 4]]\n>>> new\n[1, 2, ['3', 4]]\n```\nPS:总结来说,**浅拷贝在复制的时候,对于变量的第一层地址.创建了新的空间.但是对于第二层以下的地址.则是直接偷懒.把地址复制了赋予左边,并没有开创同等的空间**\n\n### 深拷贝\n第三种 深拷贝 才是真正意义上的完全拷贝.即重新创建与右值同样大小的空间.然后循环复制.这种情况下.新创建的变量无论如何修改都不会影响到旧的变量\n\n```python3\n>>> import copy\n>>> old = [1,2,[3,4]]\n>>> new = copy.deepcopy(old)\n>>> new\n[1, 2, [3, 4]]\n>>> new[0]=\"1\"\n>>> new[2][0]=\"3\"\n>>> new\n['1', 2, ['3', 4]]\n>>> old\n[1, 2, [3, 4]]\n```\n\n#### 引用\nhttps://docs.python.org/3/library/copy.html\n##### TODO\n    [ ] 加上图片","slug":"copy-and-deepcopy","published":1,"updated":"2020-02-15T17:02:56.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6nv4vt60000e5n38g0289a4","content":"<h2 id=\"copy-and-deepcopy\"><a href=\"#copy-and-deepcopy\" class=\"headerlink\" title=\"copy and deepcopy\"></a>copy and deepcopy</h2><p>在python3 中 复制分为三种,即 “赋值” “浅拷贝” “深拷贝”.python 官方文档解释如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><p>赋值即利用 “=” 号运算符进行赋值, 但是这种赋值其本质是 “引用”, 即 重新创建一个变量名,然后绑定到 “=” 号右值的地址,这种情况下,<strong>任何对新创建的变量进行的修改都会同步到旧的变量上!</strong></p>\n<p>案例如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; old &#x3D; 2</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; old</span><br><span class=\"line\">&gt;&gt;&gt; id(old)</span><br><span class=\"line\">140721449431328</span><br><span class=\"line\">&gt;&gt;&gt; id(new)</span><br><span class=\"line\">140721449431328</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; old &#x3D; [1,2,3]</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; old</span><br><span class=\"line\">&gt;&gt;&gt; old[0]&#x3D;&quot;1&quot;</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[&#39;1&#39;, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; old is new</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; id(old)&#x3D;&#x3D;id(new)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>PS:总结来说,则是<strong>创建了一个新的变量名.然后指向旧变量的地址</strong></p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>第二种即是我们常说的 <strong>浅拷贝</strong> 这种拷贝是在于自定义的数据类型 被 “=” 运算符使用时所发生的.这种情况下 任何简易的修改(指 第一层引用的修改) 并不会改动另一个变量,但是在修改深处的值时,则依旧会影响到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import copy</span><br><span class=\"line\">&gt;&gt;&gt; old &#x3D; [1,2,[3,4]]</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; copy.copy(old)</span><br><span class=\"line\">&gt;&gt;&gt; old[0]&#x3D;&quot;1&quot;</span><br><span class=\"line\">&gt;&gt;&gt; old</span><br><span class=\"line\">[&#39;1&#39;, 2, [3, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[1, 2, [3, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; old[2][0] &#x3D; &quot;3&quot;</span><br><span class=\"line\">&gt;&gt;&gt; old</span><br><span class=\"line\">[&#39;1&#39;, 2, [&#39;3&#39;, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[1, 2, [&#39;3&#39;, 4]]</span><br></pre></td></tr></table></figure>\n<p>PS:总结来说,<strong>浅拷贝在复制的时候,对于变量的第一层地址.创建了新的空间.但是对于第二层以下的地址.则是直接偷懒.把地址复制了赋予左边,并没有开创同等的空间</strong></p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>第三种 深拷贝 才是真正意义上的完全拷贝.即重新创建与右值同样大小的空间.然后循环复制.这种情况下.新创建的变量无论如何修改都不会影响到旧的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import copy</span><br><span class=\"line\">&gt;&gt;&gt; old &#x3D; [1,2,[3,4]]</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; copy.deepcopy(old)</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[1, 2, [3, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; new[0]&#x3D;&quot;1&quot;</span><br><span class=\"line\">&gt;&gt;&gt; new[2][0]&#x3D;&quot;3&quot;</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[&#39;1&#39;, 2, [&#39;3&#39;, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; old</span><br><span class=\"line\">[1, 2, [3, 4]]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p><a href=\"https://docs.python.org/3/library/copy.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/copy.html</a></p>\n<h5 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h5><pre><code>[ ] 加上图片</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"copy-and-deepcopy\"><a href=\"#copy-and-deepcopy\" class=\"headerlink\" title=\"copy and deepcopy\"></a>copy and deepcopy</h2><p>在python3 中 复制分为三种,即 “赋值” “浅拷贝” “深拷贝”.python 官方文档解释如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h3><p>赋值即利用 “=” 号运算符进行赋值, 但是这种赋值其本质是 “引用”, 即 重新创建一个变量名,然后绑定到 “=” 号右值的地址,这种情况下,<strong>任何对新创建的变量进行的修改都会同步到旧的变量上!</strong></p>\n<p>案例如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; old &#x3D; 2</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; old</span><br><span class=\"line\">&gt;&gt;&gt; id(old)</span><br><span class=\"line\">140721449431328</span><br><span class=\"line\">&gt;&gt;&gt; id(new)</span><br><span class=\"line\">140721449431328</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; old &#x3D; [1,2,3]</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; old</span><br><span class=\"line\">&gt;&gt;&gt; old[0]&#x3D;&quot;1&quot;</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[&#39;1&#39;, 2, 3]</span><br><span class=\"line\">&gt;&gt;&gt; old is new</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; id(old)&#x3D;&#x3D;id(new)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n<p>PS:总结来说,则是<strong>创建了一个新的变量名.然后指向旧变量的地址</strong></p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><p>第二种即是我们常说的 <strong>浅拷贝</strong> 这种拷贝是在于自定义的数据类型 被 “=” 运算符使用时所发生的.这种情况下 任何简易的修改(指 第一层引用的修改) 并不会改动另一个变量,但是在修改深处的值时,则依旧会影响到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import copy</span><br><span class=\"line\">&gt;&gt;&gt; old &#x3D; [1,2,[3,4]]</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; copy.copy(old)</span><br><span class=\"line\">&gt;&gt;&gt; old[0]&#x3D;&quot;1&quot;</span><br><span class=\"line\">&gt;&gt;&gt; old</span><br><span class=\"line\">[&#39;1&#39;, 2, [3, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[1, 2, [3, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; old[2][0] &#x3D; &quot;3&quot;</span><br><span class=\"line\">&gt;&gt;&gt; old</span><br><span class=\"line\">[&#39;1&#39;, 2, [&#39;3&#39;, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[1, 2, [&#39;3&#39;, 4]]</span><br></pre></td></tr></table></figure>\n<p>PS:总结来说,<strong>浅拷贝在复制的时候,对于变量的第一层地址.创建了新的空间.但是对于第二层以下的地址.则是直接偷懒.把地址复制了赋予左边,并没有开创同等的空间</strong></p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>第三种 深拷贝 才是真正意义上的完全拷贝.即重新创建与右值同样大小的空间.然后循环复制.这种情况下.新创建的变量无论如何修改都不会影响到旧的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import copy</span><br><span class=\"line\">&gt;&gt;&gt; old &#x3D; [1,2,[3,4]]</span><br><span class=\"line\">&gt;&gt;&gt; new &#x3D; copy.deepcopy(old)</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[1, 2, [3, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; new[0]&#x3D;&quot;1&quot;</span><br><span class=\"line\">&gt;&gt;&gt; new[2][0]&#x3D;&quot;3&quot;</span><br><span class=\"line\">&gt;&gt;&gt; new</span><br><span class=\"line\">[&#39;1&#39;, 2, [&#39;3&#39;, 4]]</span><br><span class=\"line\">&gt;&gt;&gt; old</span><br><span class=\"line\">[1, 2, [3, 4]]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><p><a href=\"https://docs.python.org/3/library/copy.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/copy.html</a></p>\n<h5 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h5><pre><code>[ ] 加上图片</code></pre>"},{"title":"lvalur_and_rvalue","date":"2019-01-22T10:41:56.000Z","description":"cpp中的值类型","_content":"# cpp 的 value_category\n\n在cpp 当中 每个表达式(带有操作数的操作符，字面值，变量名等)都有一个类型与值类型 。\n\n值类型是在表达式求值期间创建，复制和移动临时对象时编译器必须遵循的规则的基础，并且只属于三种类型的其中之一：prvalue xvalue lvalue。\n\n## TODO 等待补充\n","source":"_posts/lvalur-and-rvalue.md","raw":"---\ntitle: lvalur_and_rvalue\ndate: 2019-1-22 18:41:56\ntags:\n- cpp\n- lvalue\n- rvalue\ndescription: cpp中的值类型 \n---\n# cpp 的 value_category\n\n在cpp 当中 每个表达式(带有操作数的操作符，字面值，变量名等)都有一个类型与值类型 。\n\n值类型是在表达式求值期间创建，复制和移动临时对象时编译器必须遵循的规则的基础，并且只属于三种类型的其中之一：prvalue xvalue lvalue。\n\n## TODO 等待补充\n","slug":"lvalur-and-rvalue","published":1,"updated":"2020-02-15T17:02:56.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6nv4vtb0002e5n3fw6l7vcu","content":"<h1 id=\"cpp-的-value-category\"><a href=\"#cpp-的-value-category\" class=\"headerlink\" title=\"cpp 的 value_category\"></a>cpp 的 value_category</h1><p>在cpp 当中 每个表达式(带有操作数的操作符，字面值，变量名等)都有一个类型与值类型 。</p>\n<p>值类型是在表达式求值期间创建，复制和移动临时对象时编译器必须遵循的规则的基础，并且只属于三种类型的其中之一：prvalue xvalue lvalue。</p>\n<h2 id=\"TODO-等待补充\"><a href=\"#TODO-等待补充\" class=\"headerlink\" title=\"TODO 等待补充\"></a>TODO 等待补充</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cpp-的-value-category\"><a href=\"#cpp-的-value-category\" class=\"headerlink\" title=\"cpp 的 value_category\"></a>cpp 的 value_category</h1><p>在cpp 当中 每个表达式(带有操作数的操作符，字面值，变量名等)都有一个类型与值类型 。</p>\n<p>值类型是在表达式求值期间创建，复制和移动临时对象时编译器必须遵循的规则的基础，并且只属于三种类型的其中之一：prvalue xvalue lvalue。</p>\n<h2 id=\"TODO-等待补充\"><a href=\"#TODO-等待补充\" class=\"headerlink\" title=\"TODO 等待补充\"></a>TODO 等待补充</h2>"},{"title":"secure_shell 简述之非对称加密","date":"2019-02-15T11:23:36.000Z","description":"ssh之非对称加密","mathjax":true,"_content":"## SSH简述\n&ensp;&ensp;&ensp;&ensp;SSH 全称为Secure Shell , 是一种加密的 __网络传输协议__ ,即理论上任何网络服务都可以用SSH来安全传输，不过主要用于远程登陆系统。SSH的出现主要用于取代以往不安全的Telnet 和非安全shell的替代品，Telnet 与 Berkeley Login，rsh，rexec等协议采用明文传输，容易遭受到攻击，所以应此产生了SSH这种能在非安全网络环境下(容易受到攻击，如互联网)信息的加密完整可靠。\n\n## SSH原理\n&ensp;&ensp;&ensp;&ensp;谈到SSH就不得不提到SSH的通信原理 __公开密钥加密(Public-Key Cryptography)__ 国内也有叫法叫做 __非对称加密__ ，我个人比较喜欢后者,不过在这里为了更好的说明原理就是用学术名称.\n\n&ensp;&ensp;&ensp;&ensp;公开密钥加密 由两部分组成，一部分是如其名称是一个公共密钥，公钥可以被别人所知，另一个是私有密钥，私钥只能自己知道. 公共密钥加密看似比普通的单密钥加密多了一个公钥,但是这确是 公开密钥加密算法的精髓,保证其能在非安全网络环境下进行安全传输的关键.\n\n\n## 公开密钥加密的原理\n&ensp;&ensp;&ensp;&ensp;简单来说，公开密钥加密的核心是采用基于数学问题的密码算法，产生一个公钥和一个密钥，公钥和密钥加密的消息只能由对应的密钥和公钥解密，其自身也无法解密，这种情况下，可以把公钥放出去，因为只有私钥可以解密，任何对密文的修改都会导致私钥无法解密，所以可以在非安全的网络环境下传输。\n\n### 公开密钥加密的数学原理 (RSA算法)\n&ensp;&ensp;&ensp;&ensp;这里以RSA算法为版本进行讲解。假设A和B想过通过一个不安全的网络信道进行通信，那么A可以通过以下方式来产生一个公钥和一个密钥\n```\n1.随意选择两个大的素数 p和q,p!=q,计算 N=pq\n2.根据欧拉函数，r = φ (N) = φ(p)φ(q) = φ(p-1)φ(q-1)\n3.选择一个小于r,并且与r互质的整数e,并求e关于r的模逆元，命名为d (求d令ed = 1 (mod r))\n4.将 p 和 q 销毁\n5.(N,e)为公钥,(N,d)为私钥\n```\n&ensp;&ensp;&ensp;&ensp;如此，B在得知A的公钥(N,e)后，如果想要给A发送一个消息，可以通过提前约定的格式把明文m转化为一个小于N的非负整数n，通过公式 __$c \\equiv n^e \\pmod{N}$__ 来将密文m转化为c，并且将其传输给a\n\n&ensp;&ensp;&ensp;&ensp;并且，a在得到密文c后通过 __$n \\equiv c^d \\pmod{N}$__ 来解出n,并且通过约定的格式还原出m.\n\n解码的原理是\n__$c^d \\equiv n^{e \\cdot d} \\pmod{N}$__\n\n已知 __$e \\cdot d \\equiv 1 \\pmod{r}$__,即 __$ed = 1 +h\\varphi (n)$__.由 欧拉定理可得：\n\n__$n^{ed}=n^{1+h\\varphi(n)}=n \\left(n^{\\varphi(N)}\\right)^{h} \\equiv n(1)^h \\pmod{N} \\equiv n \\ \\pmod{N}$__\n\n由此，就形成了一次完整的RSA公开密钥加密的加密和解密过程。\n\n## TODO\n- [ ] 加上参考链接\n- [ ] 加上图片","source":"_posts/secure-shell-1.md","raw":"---\ntitle: secure_shell 简述之非对称加密\ndate: 2019-2-15 19:23:36\ntags:\n- ssh\n- rsa\n- 非对称加密\ndescription: ssh之非对称加密\nmathjax: true\n---\n## SSH简述\n&ensp;&ensp;&ensp;&ensp;SSH 全称为Secure Shell , 是一种加密的 __网络传输协议__ ,即理论上任何网络服务都可以用SSH来安全传输，不过主要用于远程登陆系统。SSH的出现主要用于取代以往不安全的Telnet 和非安全shell的替代品，Telnet 与 Berkeley Login，rsh，rexec等协议采用明文传输，容易遭受到攻击，所以应此产生了SSH这种能在非安全网络环境下(容易受到攻击，如互联网)信息的加密完整可靠。\n\n## SSH原理\n&ensp;&ensp;&ensp;&ensp;谈到SSH就不得不提到SSH的通信原理 __公开密钥加密(Public-Key Cryptography)__ 国内也有叫法叫做 __非对称加密__ ，我个人比较喜欢后者,不过在这里为了更好的说明原理就是用学术名称.\n\n&ensp;&ensp;&ensp;&ensp;公开密钥加密 由两部分组成，一部分是如其名称是一个公共密钥，公钥可以被别人所知，另一个是私有密钥，私钥只能自己知道. 公共密钥加密看似比普通的单密钥加密多了一个公钥,但是这确是 公开密钥加密算法的精髓,保证其能在非安全网络环境下进行安全传输的关键.\n\n\n## 公开密钥加密的原理\n&ensp;&ensp;&ensp;&ensp;简单来说，公开密钥加密的核心是采用基于数学问题的密码算法，产生一个公钥和一个密钥，公钥和密钥加密的消息只能由对应的密钥和公钥解密，其自身也无法解密，这种情况下，可以把公钥放出去，因为只有私钥可以解密，任何对密文的修改都会导致私钥无法解密，所以可以在非安全的网络环境下传输。\n\n### 公开密钥加密的数学原理 (RSA算法)\n&ensp;&ensp;&ensp;&ensp;这里以RSA算法为版本进行讲解。假设A和B想过通过一个不安全的网络信道进行通信，那么A可以通过以下方式来产生一个公钥和一个密钥\n```\n1.随意选择两个大的素数 p和q,p!=q,计算 N=pq\n2.根据欧拉函数，r = φ (N) = φ(p)φ(q) = φ(p-1)φ(q-1)\n3.选择一个小于r,并且与r互质的整数e,并求e关于r的模逆元，命名为d (求d令ed = 1 (mod r))\n4.将 p 和 q 销毁\n5.(N,e)为公钥,(N,d)为私钥\n```\n&ensp;&ensp;&ensp;&ensp;如此，B在得知A的公钥(N,e)后，如果想要给A发送一个消息，可以通过提前约定的格式把明文m转化为一个小于N的非负整数n，通过公式 __$c \\equiv n^e \\pmod{N}$__ 来将密文m转化为c，并且将其传输给a\n\n&ensp;&ensp;&ensp;&ensp;并且，a在得到密文c后通过 __$n \\equiv c^d \\pmod{N}$__ 来解出n,并且通过约定的格式还原出m.\n\n解码的原理是\n__$c^d \\equiv n^{e \\cdot d} \\pmod{N}$__\n\n已知 __$e \\cdot d \\equiv 1 \\pmod{r}$__,即 __$ed = 1 +h\\varphi (n)$__.由 欧拉定理可得：\n\n__$n^{ed}=n^{1+h\\varphi(n)}=n \\left(n^{\\varphi(N)}\\right)^{h} \\equiv n(1)^h \\pmod{N} \\equiv n \\ \\pmod{N}$__\n\n由此，就形成了一次完整的RSA公开密钥加密的加密和解密过程。\n\n## TODO\n- [ ] 加上参考链接\n- [ ] 加上图片","slug":"secure-shell-1","published":1,"updated":"2020-02-15T17:03:33.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6nv4vtf0004e5n3hoosamyw","content":"<h2 id=\"SSH简述\"><a href=\"#SSH简述\" class=\"headerlink\" title=\"SSH简述\"></a>SSH简述</h2><p>&ensp;&ensp;&ensp;&ensp;SSH 全称为Secure Shell , 是一种加密的 <strong>网络传输协议</strong> ,即理论上任何网络服务都可以用SSH来安全传输，不过主要用于远程登陆系统。SSH的出现主要用于取代以往不安全的Telnet 和非安全shell的替代品，Telnet 与 Berkeley Login，rsh，rexec等协议采用明文传输，容易遭受到攻击，所以应此产生了SSH这种能在非安全网络环境下(容易受到攻击，如互联网)信息的加密完整可靠。</p>\n<h2 id=\"SSH原理\"><a href=\"#SSH原理\" class=\"headerlink\" title=\"SSH原理\"></a>SSH原理</h2><p>&ensp;&ensp;&ensp;&ensp;谈到SSH就不得不提到SSH的通信原理 <strong>公开密钥加密(Public-Key Cryptography)</strong> 国内也有叫法叫做 <strong>非对称加密</strong> ，我个人比较喜欢后者,不过在这里为了更好的说明原理就是用学术名称.</p>\n<p>&ensp;&ensp;&ensp;&ensp;公开密钥加密 由两部分组成，一部分是如其名称是一个公共密钥，公钥可以被别人所知，另一个是私有密钥，私钥只能自己知道. 公共密钥加密看似比普通的单密钥加密多了一个公钥,但是这确是 公开密钥加密算法的精髓,保证其能在非安全网络环境下进行安全传输的关键.</p>\n<h2 id=\"公开密钥加密的原理\"><a href=\"#公开密钥加密的原理\" class=\"headerlink\" title=\"公开密钥加密的原理\"></a>公开密钥加密的原理</h2><p>&ensp;&ensp;&ensp;&ensp;简单来说，公开密钥加密的核心是采用基于数学问题的密码算法，产生一个公钥和一个密钥，公钥和密钥加密的消息只能由对应的密钥和公钥解密，其自身也无法解密，这种情况下，可以把公钥放出去，因为只有私钥可以解密，任何对密文的修改都会导致私钥无法解密，所以可以在非安全的网络环境下传输。</p>\n<h3 id=\"公开密钥加密的数学原理-RSA算法\"><a href=\"#公开密钥加密的数学原理-RSA算法\" class=\"headerlink\" title=\"公开密钥加密的数学原理 (RSA算法)\"></a>公开密钥加密的数学原理 (RSA算法)</h3><p>&ensp;&ensp;&ensp;&ensp;这里以RSA算法为版本进行讲解。假设A和B想过通过一个不安全的网络信道进行通信，那么A可以通过以下方式来产生一个公钥和一个密钥</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>随意选择两个大的素数 p和q,p!=q,计算 N=pq</span><br><span class=\"line\"><span class=\"number\">2.</span>根据欧拉函数，r = φ (N) = φ(p)φ(q) = φ(p<span class=\"number\">-1</span>)φ(q<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"number\">3.</span>选择一个小于r,并且与r互质的整数e,并求e关于r的模逆元，命名为d (求d令ed = <span class=\"number\">1</span> (mod r))</span><br><span class=\"line\"><span class=\"number\">4.</span>将 p 和 q 销毁</span><br><span class=\"line\"><span class=\"number\">5.</span>(N,e)为公钥,(N,d)为私钥</span><br></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;如此，B在得知A的公钥(N,e)后，如果想要给A发送一个消息，可以通过提前约定的格式把明文m转化为一个小于N的非负整数n，通过公式 <strong>$c \\equiv n^e \\pmod{N}$</strong> 来将密文m转化为c，并且将其传输给a</p>\n<p>&ensp;&ensp;&ensp;&ensp;并且，a在得到密文c后通过 <strong>$n \\equiv c^d \\pmod{N}$</strong> 来解出n,并且通过约定的格式还原出m.</p>\n<p>解码的原理是<br><strong>$c^d \\equiv n^{e \\cdot d} \\pmod{N}$</strong></p>\n<p>已知 <strong>$e \\cdot d \\equiv 1 \\pmod{r}$</strong>,即 <strong>$ed = 1 +h\\varphi (n)$</strong>.由 欧拉定理可得：</p>\n<p><strong>$n^{ed}=n^{1+h\\varphi(n)}=n \\left(n^{\\varphi(N)}\\right)^{h} \\equiv n(1)^h \\pmod{N} \\equiv n \\ \\pmod{N}$</strong></p>\n<p>由此，就形成了一次完整的RSA公开密钥加密的加密和解密过程。</p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 加上参考链接</li>\n<li><input disabled=\"\" type=\"checkbox\"> 加上图片</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSH简述\"><a href=\"#SSH简述\" class=\"headerlink\" title=\"SSH简述\"></a>SSH简述</h2><p>&ensp;&ensp;&ensp;&ensp;SSH 全称为Secure Shell , 是一种加密的 <strong>网络传输协议</strong> ,即理论上任何网络服务都可以用SSH来安全传输，不过主要用于远程登陆系统。SSH的出现主要用于取代以往不安全的Telnet 和非安全shell的替代品，Telnet 与 Berkeley Login，rsh，rexec等协议采用明文传输，容易遭受到攻击，所以应此产生了SSH这种能在非安全网络环境下(容易受到攻击，如互联网)信息的加密完整可靠。</p>\n<h2 id=\"SSH原理\"><a href=\"#SSH原理\" class=\"headerlink\" title=\"SSH原理\"></a>SSH原理</h2><p>&ensp;&ensp;&ensp;&ensp;谈到SSH就不得不提到SSH的通信原理 <strong>公开密钥加密(Public-Key Cryptography)</strong> 国内也有叫法叫做 <strong>非对称加密</strong> ，我个人比较喜欢后者,不过在这里为了更好的说明原理就是用学术名称.</p>\n<p>&ensp;&ensp;&ensp;&ensp;公开密钥加密 由两部分组成，一部分是如其名称是一个公共密钥，公钥可以被别人所知，另一个是私有密钥，私钥只能自己知道. 公共密钥加密看似比普通的单密钥加密多了一个公钥,但是这确是 公开密钥加密算法的精髓,保证其能在非安全网络环境下进行安全传输的关键.</p>\n<h2 id=\"公开密钥加密的原理\"><a href=\"#公开密钥加密的原理\" class=\"headerlink\" title=\"公开密钥加密的原理\"></a>公开密钥加密的原理</h2><p>&ensp;&ensp;&ensp;&ensp;简单来说，公开密钥加密的核心是采用基于数学问题的密码算法，产生一个公钥和一个密钥，公钥和密钥加密的消息只能由对应的密钥和公钥解密，其自身也无法解密，这种情况下，可以把公钥放出去，因为只有私钥可以解密，任何对密文的修改都会导致私钥无法解密，所以可以在非安全的网络环境下传输。</p>\n<h3 id=\"公开密钥加密的数学原理-RSA算法\"><a href=\"#公开密钥加密的数学原理-RSA算法\" class=\"headerlink\" title=\"公开密钥加密的数学原理 (RSA算法)\"></a>公开密钥加密的数学原理 (RSA算法)</h3><p>&ensp;&ensp;&ensp;&ensp;这里以RSA算法为版本进行讲解。假设A和B想过通过一个不安全的网络信道进行通信，那么A可以通过以下方式来产生一个公钥和一个密钥</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>随意选择两个大的素数 p和q,p!=q,计算 N=pq</span><br><span class=\"line\"><span class=\"number\">2.</span>根据欧拉函数，r = φ (N) = φ(p)φ(q) = φ(p<span class=\"number\">-1</span>)φ(q<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"number\">3.</span>选择一个小于r,并且与r互质的整数e,并求e关于r的模逆元，命名为d (求d令ed = <span class=\"number\">1</span> (mod r))</span><br><span class=\"line\"><span class=\"number\">4.</span>将 p 和 q 销毁</span><br><span class=\"line\"><span class=\"number\">5.</span>(N,e)为公钥,(N,d)为私钥</span><br></pre></td></tr></table></figure>\n<p>&ensp;&ensp;&ensp;&ensp;如此，B在得知A的公钥(N,e)后，如果想要给A发送一个消息，可以通过提前约定的格式把明文m转化为一个小于N的非负整数n，通过公式 <strong>$c \\equiv n^e \\pmod{N}$</strong> 来将密文m转化为c，并且将其传输给a</p>\n<p>&ensp;&ensp;&ensp;&ensp;并且，a在得到密文c后通过 <strong>$n \\equiv c^d \\pmod{N}$</strong> 来解出n,并且通过约定的格式还原出m.</p>\n<p>解码的原理是<br><strong>$c^d \\equiv n^{e \\cdot d} \\pmod{N}$</strong></p>\n<p>已知 <strong>$e \\cdot d \\equiv 1 \\pmod{r}$</strong>,即 <strong>$ed = 1 +h\\varphi (n)$</strong>.由 欧拉定理可得：</p>\n<p><strong>$n^{ed}=n^{1+h\\varphi(n)}=n \\left(n^{\\varphi(N)}\\right)^{h} \\equiv n(1)^h \\pmod{N} \\equiv n \\ \\pmod{N}$</strong></p>\n<p>由此，就形成了一次完整的RSA公开密钥加密的加密和解密过程。</p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 加上参考链接</li>\n<li><input disabled=\"\" type=\"checkbox\"> 加上图片</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck6nv4vt60000e5n38g0289a4","tag_id":"ck6nv4vtd0003e5n3g71k1lhf","_id":"ck6nv4vti0009e5n379she4x1"},{"post_id":"ck6nv4vt60000e5n38g0289a4","tag_id":"ck6nv4vtg0005e5n36tg18xty","_id":"ck6nv4vti000ae5n328mh4xow"},{"post_id":"ck6nv4vt60000e5n38g0289a4","tag_id":"ck6nv4vth0006e5n3aush97xj","_id":"ck6nv4vti000ce5n35lw41yhr"},{"post_id":"ck6nv4vt60000e5n38g0289a4","tag_id":"ck6nv4vth0007e5n3109v4svl","_id":"ck6nv4vti000de5n3ei1vc7fl"},{"post_id":"ck6nv4vtb0002e5n3fw6l7vcu","tag_id":"ck6nv4vth0008e5n3c1uidln2","_id":"ck6nv4vtj000ge5n3gh8o3gze"},{"post_id":"ck6nv4vtb0002e5n3fw6l7vcu","tag_id":"ck6nv4vti000be5n31kiugj1m","_id":"ck6nv4vtj000he5n38bdh3kbs"},{"post_id":"ck6nv4vtb0002e5n3fw6l7vcu","tag_id":"ck6nv4vti000ee5n3fm5eh3mr","_id":"ck6nv4vtk000je5n3gxk3d5kv"},{"post_id":"ck6nv4vtf0004e5n3hoosamyw","tag_id":"ck6nv4vtj000fe5n3h6o94rdt","_id":"ck6nv4vtk000le5n3a04nb2tk"},{"post_id":"ck6nv4vtf0004e5n3hoosamyw","tag_id":"ck6nv4vtj000ie5n31ls16t4l","_id":"ck6nv4vtk000me5n30uzddr6f"},{"post_id":"ck6nv4vtf0004e5n3hoosamyw","tag_id":"ck6nv4vtk000ke5n331eg4wfh","_id":"ck6nv4vtk000ne5n3goqgemxm"}],"Tag":[{"name":"python","_id":"ck6nv4vtd0003e5n3g71k1lhf"},{"name":"python3","_id":"ck6nv4vtg0005e5n36tg18xty"},{"name":"copy","_id":"ck6nv4vth0006e5n3aush97xj"},{"name":"deepcopy","_id":"ck6nv4vth0007e5n3109v4svl"},{"name":"cpp","_id":"ck6nv4vth0008e5n3c1uidln2"},{"name":"lvalue","_id":"ck6nv4vti000be5n31kiugj1m"},{"name":"rvalue","_id":"ck6nv4vti000ee5n3fm5eh3mr"},{"name":"ssh","_id":"ck6nv4vtj000fe5n3h6o94rdt"},{"name":"rsa","_id":"ck6nv4vtj000ie5n31ls16t4l"},{"name":"非对称加密","_id":"ck6nv4vtk000ke5n331eg4wfh"}]}}