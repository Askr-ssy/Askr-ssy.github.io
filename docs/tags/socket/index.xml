<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>socket - Tag - sunflower</title>
        <link>https://blog.askr.cc/tags/socket/</link>
        <description>socket - Tag - sunflower</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 20 May 2020 11:19:40 &#43;0000</lastBuildDate><atom:link href="https://blog.askr.cc/tags/socket/" rel="self" type="application/rss+xml" /><item>
    <title>IPC-进程间通信</title>
    <link>https://blog.askr.cc/posts/inter-process-communication-1/</link>
    <pubDate>Wed, 20 May 2020 11:19:40 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://blog.askr.cc/posts/inter-process-communication-1/</guid>
    <description><![CDATA[本机 - 不同进程之间的通讯 在计算机科学当中，不同进程都有独立的系统资源，进程与进程之间是相互隔离的。这时，为了让不同的进程互相访问资源并进行协调工作，才有了进程间通信。
通常，进程间通信分为C/S，使用操作系统提供的以下接口来进行通信，这里大致从传输速率，传输介质，安全性，数据易管理性简单说下。
文件 在指定的目录利用文件来进行通信，也是一个简单粗暴，但是在架构简单的情况下十分好用的方式，只要处理好读写锁，适用于进程大量读取数据，少量修改的情况，缺点是进程间的通信介质为磁盘，传输速率被限制，而且安全性依靠文件系统，需要自己去在程序中管理文件，不是很方便。
信号(Signal) 信号是 *nix系统和其他兼容POSIX的操作系统中才会使用的，信号是一种通知，它会发送一个指定的信号给进程，如&quot;SIGABRT&quot;,&ldquo;SIGKILL&rdquo;,&ldquo;SIGSTOP&quot;等，操作系统会执行进程的 信号处理程序，如果没有，则执行默认程序。
信号是由操作系统支持的，所以传输速率很快，但是每次传输的数据量很少，最多不超过 2^6 个,传输介质可以视为cpu,但是如果使用信号作为数据的传输手段，那么安全会有很大的问题，因为信号原本是作为对进程的控制而使用的，贸然使用会破坏原本对进程的控制手段，更有可能在进程变成僵尸进程的时候，没有解决手段。而作为一个对单一进程发送数据的手段来所，基本不需要考虑管理性。
Socket (NetWork) 本质是操作系统为进程提供的面向网络的，一种进程通信手段，通常是指使用IP协议的Socket,用于和网络中其他进程的通信，不过在终端 指向本机的时候也可以和本机中的其他进程通信，传输介质根据网络速率而定，介质是网络，安全性在基于tcp的情况下是可以保证的，管理性算是不错，但是需要自己去进行管理。
Socket (Unix domain) Socket 原本是为网络通讯设计的，但后来在Socket的框架上发展出一种IPC机制，即是 Unix Socket，是操作系统提供的，用于同一台机器上不同进程与不同进程之间的通信，传输速率因为是字节通过内核，速率并不算满，介质可以视为CPU，安全性可以保证，管理性也算不错
消息队列 消息队列 更多的情况用于网络传输数据等，利用队列的结构来实现，优点是异步，可以容纳较多的消息等，本机的情况下，传输速率 应该是由实现软件来实现，介质可以使为内存，如果考虑到持久化的情况，可能速度会稍慢，安全性由实现来决定，不过一般成熟的框架的安全性是可以保证的，数据的管理性因为队列的结构，可以说是十分不错
Pipe (匿名) 匿名通道 基本是用于父进程和子进程之间的通信，父进程创建一个通道，fork的时候，把子进程和父进程的通道链接到一起，半工通信，生命周期基于父进程，传输速率很快，介质视为CPU，安全性不错，但是数据的管理性并不是很好
Pipe (命名) 命名通道 是匿名通道的加强版，可以用于任意进程之间的通信，而不像是匿名通道只能用与父进程与子进程的通信，生命周期不被父进程限制，具体由文件系统实现，传输速率不错，传输介质为文件，安全性还可以(？)，管理性还可以。
共享内存 通常是值 由某个进程，所创建的可以被其他进程所访问的内存区域，具体实现由操作系统来决定，传输速率较快，介质为内存，安全性较高，数据管理性较差。
Memory-mapped file 等待补完
TODO 补完Memory-mapped file 严格给出传输速率，安全性，管理性的定义 严格确定各种通信手段的介质 画出图表 重新真理语言 ]]></description>
</item>
</channel>
</rss>
